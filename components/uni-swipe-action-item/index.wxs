var MIN_DISTANCE = 10;

function sizeReady(newValue, oldValue, ownerInstance, instance) {
    var state = instance.getState();
    var buttonPositions = JSON.parse(newValue);
    if (!buttonPositions || !buttonPositions.data || buttonPositions.data.length === 0) return;;
    state.leftWidth = buttonPositions.data[(0)].width;
    state.rightWidth = buttonPositions.data[(1)].width;
    state.threshold = instance.getDataset().threshold;
    if (buttonPositions.show && buttonPositions.show !== 'none') {
        openState(buttonPositions.show, instance, ownerInstance);
        return
    };
    if (state.left) {
        openState('none', instance, ownerInstance)
    };
    resetTouchStatus(instance)
};

function touchstart(e, ins) {
    var instance = e.instance;
    var disabled = instance.getDataset().disabled;
    var state = instance.getState();
    disabled = (typeof(disabled) === 'string' ? JSON.parse(disabled) : disabled) || false;
    if (disabled) return;;
    instance.requestAnimationFrame((function() {
        instance.removeClass('ani');
        ins.callMethod('closeSwipe')
    }));
    state.x = state.left || 0;
    stopTouchStart(e, ins)
};

function touchmove(e, ownerInstance) {
    var instance = e.instance;
    var disabled = instance.getDataset().disabled;
    var state = instance.getState();
    disabled = (typeof(disabled) === 'string' ? JSON.parse(disabled) : disabled) || false;
    if (disabled) return;;
    stopTouchMove(e);
    if (state.direction !== 'horizontal') {
        return
    };
    if (e.preventDefault) {
        e.preventDefault()
    };
    move(state.x + state.deltaX, instance, ownerInstance)
};

function touchend(e, ownerInstance) {
    var instance = e.instance;
    var disabled = instance.getDataset().disabled;
    var state = instance.getState();
    disabled = (typeof(disabled) === 'string' ? JSON.parse(disabled) : disabled) || false;
    if (disabled) return;;
    moveDirection(state.left, instance, ownerInstance)
};

function move(value, instance, ownerInstance) {
    value = value || 0;
    var state = instance.getState();
    var leftWidth = state.leftWidth;
    var rightWidth = state.rightWidth;
    state.left = range(value, -rightWidth, leftWidth);
    instance.requestAnimationFrame((function() {
        instance.setStyle(({
            transform: 'translateX(' + state.left + 'px)',
            '-webkit-transform': 'translateX(' + state.left + 'px)',
        }))
    }))
};

function range(num, min, max) {
    return (Math.min(Math.max(num, min), max))
};

function moveDirection(left, ins, ownerInstance) {
    var state = ins.getState();
    var threshold = state.threshold;
    var position = state.position;
    var isopen = state.isopen || 'none';
    var leftWidth = state.leftWidth;
    var rightWidth = state.rightWidth;
    if (state.deltaX === 0) {
        openState('none', ins, ownerInstance);
        return
    };
    if ((isopen === 'none' && rightWidth > 0 && -left > threshold) || (isopen !== 'none' && rightWidth > 0 && rightWidth + left < threshold)) {
        openState('right', ins, ownerInstance)
    } else if ((isopen === 'none' && leftWidth > 0 && left > threshold) || (isopen !== 'none' && leftWidth > 0 && leftWidth - left < threshold)) {
        openState('left', ins, ownerInstance)
    } else {
        openState('none', ins, ownerInstance)
    }
};

function openState(type, ins, ownerInstance) {
    var state = ins.getState();
    var position = state.position;
    var leftWidth = state.leftWidth;
    var rightWidth = state.rightWidth;
    var left = '';
    state.isopen = state.isopen ? state.isopen : 'none';
    switch (type) {
        case "left":
            left = leftWidth;
            break;
        case "right":
            left = -rightWidth;
            break;
        default:
            left = 0;
    };
    if (state.isopen !== type) {
        state.throttle = true;
        ownerInstance.callMethod('change', ({
            open: type,
        }))
    };
    state.isopen = type;
    ins.requestAnimationFrame((function() {
        ins.addClass('ani');
        move(left, ins, ownerInstance)
    }))
};

function getDirection(x, y) {
    if (x > y && x > MIN_DISTANCE) {
        return ('horizontal')
    };
    if (y > x && y > MIN_DISTANCE) {
        return ('vertical')
    };
    return ('')
};

function resetTouchStatus(instance) {
    var state = instance.getState();
    state.direction = '';
    state.deltaX = 0;
    state.deltaY = 0;
    state.offsetX = 0;
    state.offsetY = 0
};

function stopTouchStart(event) {
    var instance = event.instance;
    var state = instance.getState();
    resetTouchStatus(instance);
    var touch = event.touches[(0)];
    state.startX = touch.clientX;
    state.startY = touch.clientY
};

function stopTouchMove(event) {
    var instance = event.instance;
    var state = instance.getState();
    var touch = event.touches[(0)];
    state.deltaX = touch.clientX - state.startX;
    state.deltaY = touch.clientY - state.startY;
    state.offsetX = Math.abs(state.deltaX);
    state.offsetY = Math.abs(state.deltaY);
    state.direction = state.direction || getDirection(state.offsetX, state.offsetY)
};
module.exports = ({
    sizeReady: sizeReady,
    touchstart: touchstart,
    touchmove: touchmove,
    touchend: touchend,
});